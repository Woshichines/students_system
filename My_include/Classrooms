#ifndef CLASSROOMS
#define CLASSROOMS

#include "./head"
#include "Students"
#include "Teachers"

using namespace std;

class Classrooms : enable_shared_from_this<Classrooms>
{
    public:
        static int m_总学生数量;

    private:
    Schools* m_校区;
    int m_级数;
    int m_班数;
    string m_班名;
    int m_学生数;
    vector<shared_ptr<Students>> m_学生;
    vector<shared_ptr<Teachers>> m_教师;

    private:
    shared_ptr<Classrooms> self = shared_from_this();

    public:
        Classrooms(
                    Schools *校区 = NULL,  
                    int 级数 = 求级数(), 
                    int 班数 = 0, 
                    string 班名 = 求级数()+"届新建班级",
                    vector<shared_ptr<Students>> 学生 = {},
                    vector<shared_ptr<Teachers>> 教师 = {})
                    :   m_校区(校区),
                        m_级数(级数),
                        m_班数(班数),
                        m_班名(班名),
                        m_学生数(学生.size()),
                        m_学生(学生),
                        m_教师(教师)
                        {}


        int 打印届数(); 
        int 打印其他(); 
        int 增加学生(shared_ptr<Students> 学生);   
        int 删除学生(shared_ptr<Students> 学生);    
        int 增加教师(shared_ptr<Teachers> 老师);   
        int 删除教师(shared_ptr<Teachers> 老师);
        auto 输出学生列表();

};

int Classrooms::m_总学生数量 = 0;

int Classrooms::打印届数()
{
    cout << m_级数 << endl;
    return 0;
}

int Classrooms::打印其他()
{
    cout << m_级数<< endl
        << m_学生数 << endl
        << m_班名 << endl
        << m_班数 << endl;
    return 0;
}

int Classrooms::增加学生(shared_ptr<Students> 学生)
{
    m_学生数 += 1;
    m_总学生数量 += 1;
    m_学生.push_back(学生);

    return 0;
}

int Classrooms::删除学生(shared_ptr<Students> 学生)
{
    m_学生数 -= 1;
    m_总学生数量 -= 1;
    return 0;
}

int Classrooms::增加教师(shared_ptr<Teachers> 老师)
{
    m_教师.push_back(老师);
    return 0;

}

int Classrooms::删除教师(shared_ptr<Teachers> 老师)
{
    m_教师.erase(remove(m_教师.begin(), m_教师.end(), 老师), m_教师.end());
    return 0;
}

auto Classrooms::输出学生列表()
{
    return m_学生;
}

#endif